open import MonoidBasics
open import Data.Product
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning

module ProductMonoid (ùìú ùìù : Monoid) where

  open Monoid ùìú renaming (Œµ to œÜ ; _‚äï_ to _‚äô_ ; idL to idL-ùìú ; idR to idR-ùìú ; assoc to assoc-ùìú)
  open Monoid ùìù renaming (Œµ to œà ; _‚äï_ to _‚äó_ ; idL to idL-ùìù ; idR to idR-ùìù ; assoc to assoc-ùìù)

  -- Extract the underlying set
  -- This is just a convenient operator syntax for `type`
  ‚ü¶_‚üß : Monoid -> Set
  ‚ü¶ ùìû ‚üß = Monoid.type ùìû

  -- The type of product monoid elements
  √ó-type : Set
  √ó-type = ‚ü¶ ùìú ‚üß √ó ‚ü¶ ùìù ‚üß

  -- The empty product monoid element
  Œµ : √ó-type
  Œµ = œÜ , œà

  -- Product monoid composition
  _‚®Ç_ : √ó-type -> √ó-type -> √ó-type
  (m‚ÇÅ , n‚ÇÅ) ‚®Ç (m‚ÇÇ , n‚ÇÇ) = (m‚ÇÅ ‚äô m‚ÇÇ) , (n‚ÇÅ ‚äó n‚ÇÇ)

  -- Your proofs go here!
  √ó-idL : (a : √ó-type) -> (a ‚®Ç (œÜ , œà)) ‚â° a 
  √ó-idL (m , n) = 
    begin 
      (m , n) ‚®Ç (œÜ , œà) 
        ‚â°‚ü® refl ‚ü© 
      (m ‚äô œÜ , n ‚äó œà)
        ‚â°‚ü® cong (Œª u -> (u , n ‚äó œà))  (idL-ùìú m) ‚ü©
      (m , n ‚äó œà)
        ‚â°‚ü® cong (Œª u -> (m , u))  (idL-ùìù n) ‚ü©
      (m , n) 
    ‚àé 
  √ó-idR : (a : √ó-type) -> ((œÜ , œà) ‚®Ç a) ‚â° a
  √ó-idR (m , n) = 
    begin 
      (œÜ , œà) ‚®Ç (m , n)
        ‚â°‚ü® refl ‚ü© 
      (œÜ ‚äô m , œà ‚äó n)
        ‚â°‚ü® cong (Œª u -> (u , œà ‚äó n))  (idR-ùìú m) ‚ü©
      (m , œà ‚äó n)
        ‚â°‚ü® cong (Œª u -> (m , u))  (idR-ùìù n) ‚ü©
      (m , n) 
    ‚àé 
  √ó-assoc : (a b c : √ó-type) -> (a ‚®Ç b) ‚®Ç c ‚â° a ‚®Ç (b ‚®Ç c)
  √ó-assoc (m‚ÇÅ , n‚ÇÅ)(m‚ÇÇ , n‚ÇÇ)(m‚ÇÉ , n‚ÇÉ) = 
    begin 
      ((m‚ÇÅ , n‚ÇÅ) ‚®Ç (m‚ÇÇ , n‚ÇÇ)) ‚®Ç (m‚ÇÉ , n‚ÇÉ)
        ‚â°‚ü® refl ‚ü© 
      (m‚ÇÅ ‚äô m‚ÇÇ , n‚ÇÅ ‚äó n‚ÇÇ) ‚®Ç (m‚ÇÉ , n‚ÇÉ)
        ‚â°‚ü® refl ‚ü© 
      (m‚ÇÅ ‚äô m‚ÇÇ) ‚äô m‚ÇÉ , (n‚ÇÅ ‚äó n‚ÇÇ) ‚äó n‚ÇÉ
        ‚â°‚ü® cong (Œª u -> (u , (n‚ÇÅ ‚äó n‚ÇÇ) ‚äó n‚ÇÉ)) (assoc-ùìú m‚ÇÅ m‚ÇÇ m‚ÇÉ) ‚ü© 
      m‚ÇÅ ‚äô (m‚ÇÇ ‚äô m‚ÇÉ) , (n‚ÇÅ ‚äó n‚ÇÇ) ‚äó n‚ÇÉ
        ‚â°‚ü® cong (Œª u -> (m‚ÇÅ ‚äô (m‚ÇÇ ‚äô m‚ÇÉ) , u)) (assoc-ùìù n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚ü©  
      m‚ÇÅ ‚äô (m‚ÇÇ ‚äô m‚ÇÉ) , n‚ÇÅ ‚äó ( n‚ÇÇ ‚äó n‚ÇÉ)
        ‚â°‚ü® refl ‚ü© 
      (m‚ÇÅ , n‚ÇÅ) ‚®Ç (m‚ÇÇ ‚äô m‚ÇÉ , n‚ÇÇ ‚äó n‚ÇÉ)  
        ‚â°‚ü® refl ‚ü© 
      (m‚ÇÅ , n‚ÇÅ) ‚®Ç ((m‚ÇÇ , n‚ÇÇ) ‚®Ç (m‚ÇÉ , n‚ÇÉ)) 
    ‚àé 

  -- Finally, let's build the monoid
  monoid : Monoid
  monoid = record
    { type  = √ó-type
    ; Œµ     =  Œµ
    ; _‚äï_   =  _‚®Ç_
    ; idL   =  √ó-idL
    ; idR   =  √ó-idR
    ; assoc =  √ó-assoc
    }