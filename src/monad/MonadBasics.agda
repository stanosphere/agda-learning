{-# OPTIONS --type-in-type #-}

module monad.MonadBasics where

open import CategoryBasics
open import functor.Functors renaming (functor-composition to _|+|_)
open import NaturalTransformation
open import Relation.Binary.PropositionalEquality

-- a monad is a triple on category C consisting of
--   * an endofunctor, T, in C
--   * a natural transformation from the identity functor in C, 1_c to T, Œ∑: 1_c -> T
--   * a natrual transformation from T compose T to T, Œº: T ‚àò T -> T
-- There are also some laws!
-- but for now I'll see if I can write down a lawless monad

record LawlessMonad { ùìí : Category } : Set where
  field
    T : Functor ùìí ùìí
    Œ∑ : NaturalTransformation id-functor T -- return
    Œº : NaturalTransformation (T |+| T) T -- join

-- the monad laws are basically the same as the monoid laws
-- first we have associativity
-- Œº ‚àò TŒº === Œº ‚àò ŒºT
-- and then the two identity laws
-- Œº ‚àò TŒ∑ === 1 (1 identity naturl transformation on T)
-- Œº ‚àò Œ∑T === 1 (1 identity naturl transformation on T)

record Monad { ùìí : Category  } : Set where
  field
    T : Functor ùìí ùìí
    Œ∑ : NaturalTransformation id-functor T
    Œº : NaturalTransformation (T |+| T) T
    -- laws
    -- id-law-right: join after return (x) and join after map return arte the same
    -- id-law-right : Œº 
  module join = NaturalTransformation.NaturalTransformation Œº 
  module return = NaturalTransformation.NaturalTransformation Œ∑ 
  open Category ùìí
  open Functor T renaming (object-map to T‚ÇÄ; arrow-map to T‚ÇÅ)

  field 
    id-law-right : ‚àÄ x -> join.Œ∑ x ‚àò return.Œ∑ (T‚ÇÄ x) ‚â° id (T‚ÇÄ x)
    id-law-left : ‚àÄ x -> join.Œ∑ x ‚àò T‚ÇÅ (return.Œ∑ x) ‚â° id (T‚ÇÄ x)
    -- each side of the assoc-law takes T |+| T |+| T -> T
    -- one side unests the outer T's first, the other unests the inner T's first
    assoc-law : ‚àÄ x -> (join.Œ∑ x) ‚àò (T‚ÇÅ (join.Œ∑ x)) ‚â° (join.Œ∑ x) ‚àò (join.Œ∑ (T‚ÇÄ x))

       
